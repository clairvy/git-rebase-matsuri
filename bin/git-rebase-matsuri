#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use Log::Minimal;
use File::Temp qw/tempdir tempfile/;
use Pod::Usage;
use App::gitrebasematsuri;


my ($GIT, $conf_file, $doit, $show_version);
GetOptions (
    'git=s'     => \$GIT,
    'c|conf=s'  => \$conf_file,
    'doit'      => \$doit,
    'V|version' => \$show_version,
);
$GIT //= '/usr/bin/env git';


my $TEMPDIR     = tempdir( CLEANUP => 1 );
my $FILE_STDERR = ( tempfile( DIR => $TEMPDIR ) )[1];


local $Log::Minimal::PRINT = sub {
    my ( $time, $type, $message, $trace ) = @_;
    for my $m ( split /\\n/, $message ) {
        my $line = "$time [$type] $m";
        $line .= " $trace"  if $type =~ /^(WARN|ERROR|CRITICAL)$/;
        $line .= "\n";
        print $line;
    }
};


sub read_file {
    my ($f) = @_;
    my $ret;
    local $/;
    open my $fh, '<', $f  or  die $!;
    $ret = <$fh>;
    close $fh;
    return $ret;
}


sub exec_cmd {
    my $cmd = shift;
    my ($stdout, $stderr);
    chomp( $stdout = `$cmd 2> $FILE_STDERR` );
    chomp( $stderr = read_file($FILE_STDERR) );
    return wantarray ? ($stdout, $stderr) : $stdout;
}


sub parse_config {
    my ($f) = @_;
    my $conf = +{};
    infof( 'config file: %s', $f );
    croakf( 'config file does not exist: %s', $! )  unless -f $f;

    my @rebase_rules;
    my $prev_rebased;

    open my $fh, '<', $f  or  croakf( 'could not open config file: %s', $! );
    while ( my $l = <$fh> ) {
        chomp $l;

        next  if $l =~ /^\s*$/;
        next  if $l =~ /^\s*\#/;

        my ($from, $onto) = split /[\-\=]>/, $l;
        unless ( defined $from  &&  defined $onto ) {
            close $fh;
            croakf 'invalid format: %s', $l;
        }
        $from =~ s/(^\s*|\s*$)//g;  # trim
        $onto =~ s/(^\s*|\s*$)//g;  # trim

        if ( $onto eq '^' ) {
            defined $prev_rebased  or  croakf( 'invalid "^" usage. previous rule is required: %s', $l );
            $onto = $prev_rebased;
        }

        push @rebase_rules, +{ from => $from, onto => $onto };
        infof 'rebase rule has been added: %s -> %s', $from, $onto;

        $prev_rebased = $from;
    }
    close $fh;

    $conf->{rebase_rules} = \@rebase_rules;

    return $conf;
}


sub current_branch {
    my $ret;
    my $stdout = exec_cmd "$GIT status -sb | head -n 1";
    ($ret) = $stdout =~ /\#\# +(.+)$/;

    if ( $ret eq 'HEAD (no branch)' ) {
        $stdout = exec_cmd "$GIT show --pretty=oneline HEAD | head -n 1";
        ($ret) = $stdout =~ /^(\S{40})/;
    }

    return $ret;
}


sub exec_rebase {
    my ($from, $onto) = @_;
    my ($stdout, $stderr);

    ($stdout, $stderr) = exec_cmd "$GIT checkout $from";
    infof $stdout  if $stdout;
    warnf $stderr  if $stderr;

    ($stdout, $stderr) = exec_cmd "$GIT rebase $onto";
    infof $stdout  if $stdout;
    warnf $stderr  if $stderr;
}


sub show_version {
    my $version = $App::gitrebasematsuri::VERSION;
    printf "git-rebase-matsuri (App::gitrebasematsuri) $version\n";
}


sub main {
    # show version
    if ( $show_version ) {
        show_version();
        return 0;
    }

    $conf_file or pod2usage();

    # config
    my $conf = parse_config $conf_file;

    # only "--doit" option is specified
    if ( $doit ) {
        # store current branch/commit
        my $current_branch = current_branch();
        infof 'current branch/commit: %s', $current_branch;

        for my $r ( @{ $conf->{rebase_rules} // [] } ) {
            exec_rebase( $r->{from}, $r->{onto} );
        }

        # back to $current_branch
        {
            my ($stdout, $stderr) = exec_cmd "$GIT checkout $current_branch";
            infof $stdout  if $stdout;
            warnf $stderr  if $stderr;
        };
    }
    else {
        infof 'Do you really rebase? specify "--doit" option.';
    }

    return 0;
}


exit main();
__END__

=head1 NAME

git-rebase-matsuri - git-rebase matsuri


=head1 SYNOPSIS

  git-rebase-matsuri --conf=<config_file>
  git-rebase-matsuri --conf=<config_file> --doit  # really execute "git rebase"


=head1 OPTIONS

=over 4

=item --conf=<config_file>, -c <config_file>

Path to "config file".

=item --doit

To really execute "git rebase", this option must be specified.

=item --git=<fullpath_to_git>

Full-path to Git. Not Git's directory but Git executable.

=item --version, -V

Shows version. That's all.


=back


=head1 CONFIG FILE

"config file" must be described as following:

  # comment
  branch-B -> branch-A
  branch-C -> branch-A

  branch-D -> branch-A
  # '^' equials 'branch-D' here
  branch-E -> ^
  # '^' equials 'branch-E' here
  branch-F -> ^

to be executed as folling:

  # on branch/commit <current>
  % git checkout branch-B
  % git rebase branch-A
  % git checkout branch-C
  % git rebase branch-A
  % git checkout branch-D
  % git rebase branch-A
  % git checkout branch-E
  % git rebase branch-D
  % git checkout branch-F
  % git rebase branch-E
  % git checkout <current>

=cut
